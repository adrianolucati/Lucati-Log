package com.lucatiworks.lucatilog.api.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lucatiworks.lucatilog.domain.model.Cliente;
import com.lucatiworks.lucatilog.domain.repository.ClienteRepository;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@RequestMapping("/clientes")
public class ClienteController {

	private ClienteRepository clienteRepository;
	
	//como fiz o RequestMapping acima, poderia deixar aqui só @GetMapping
	@GetMapping("/clientes") 
	public List<Cliente> listar() {
		return clienteRepository.findAll();
	}
	
	@GetMapping("/clientes") 
	public List<Cliente> buscar() {
		return clienteRepository.findByNomeContaining("ferr");
	}
	
	@GetMapping("/{clienteId}")
	public ResponseEntity<Cliente> buscar(@PathVariable Long clienteId) {
		return clienteRepository.findById(clienteId)
		//		.map(cliente -> ResponseEntity.ok(cliente))
				.map(ResponseEntity::ok)
				.orElse(ResponseEntity.notFound().build());
		
		//Código mais limpo a cima
		//Optional<Cliente> cliente = clienteRepository.findById(clienteId);
		
		//if (cliente.isPresent()) {
		//	return ResponseEntity.ok(cliente.get());
		//}
		
		//return ResponseEntity.notFound().build();
	}
}
