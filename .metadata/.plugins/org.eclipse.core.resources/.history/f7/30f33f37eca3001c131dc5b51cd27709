package com.lucatiworks.lucatilog.api.controller.copy;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.lucatiworks.lucatilog.domain.model.Cliente;
import com.lucatiworks.lucatilog.domain.repository.ClienteRepository;
import com.lucatiworks.lucatilog.domain.service.CatalogoClienteService;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@RequestMapping("/clientes")
public class ClienteController {

	private ClienteRepository clienteRepository;
	private CatalogoClienteService catalogoClienteService;
	
	//como fiz o RequestMapping acima, poderia deixar aqui só @GetMapping
	@GetMapping
	public List<Cliente> listar() {
		return clienteRepository.findAll();
	}
	
	@GetMapping("/clientes") 
	public List<Cliente> pesquisar() {
		return clienteRepository.findByNomeContaining("ferr");
	}
	
	@GetMapping("/{clienteId}")
	public ResponseEntity<Cliente> buscar(@PathVariable Long clienteId) {
		return clienteRepository.findById(clienteId)
		//		.map(cliente -> ResponseEntity.ok(cliente))
				.map(ResponseEntity::ok)
				.orElse(ResponseEntity.notFound().build());
		
		//Código mais limpo a cima
		//Optional<Cliente> cliente = clienteRepository.findById(clienteId);
		
		//if (cliente.isPresent()) {
		//	return ResponseEntity.ok(cliente.get());
		//}
		
		//return ResponseEntity.notFound().build();
	}
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Cliente adicionar(@Valid @RequestBody Cliente cliente) {
	//	return clienteRepository.save(cliente); substituido pela linha abaixo após criar classe para gerenciar regras de negócio
		return catalogoClienteService.salvar(cliente);
	}
	
	@PutMapping("/{clienteId}")
	public ResponseEntity<Cliente> atualizar(@Valid @PathVariable Long clienteId, @RequestBody Cliente cliente) {
		if (!clienteRepository.existsById(clienteId)) {
			return ResponseEntity.notFound().build();
			
		}
		
		cliente.setId(clienteId);
		//cliente = clienteRepository.save(cliente); substituido pela linha abaixo após criar classe para gerenciar regras de negócio
		cliente = catalogoClienteService.salvar(cliente);
		
		return ResponseEntity.ok(cliente);
	}
	
	@DeleteMapping("/{clienteId}")
	public ResponseEntity<Void> remover (@PathVariable Long clienteId){
		if (!clienteRepository.existsById(clienteId)) {
			return ResponseEntity.notFound().build();
		}
		
		//clienteRepository.deleteById(clienteId); substituido pela linha abaixo após criar classe para gerenciar regras de negócio
		catalogoClienteService.excluir(clienteId);
		
		return ResponseEntity.noContent().build();
	}
}
